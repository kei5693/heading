npm install -g @vue/cli
vue create test
npm run serve
npm install vue-router --save
npm install bootstrap-vue bootstrap 설치 후 main.js에 등록
router.js


삭제
git remote rm origin

추가
git remote add origin https://github.com/kei5693/make-repo.git
git branch --set-upstream-to=origin/main
git pull --allow-unrelated-histories
git push -u origin main
git pull origin main

git pull origin main --allow-unrelated-histories

router폴더 생성 index.js 생성





컴포넌트 등록
* 지역 등록
1.컴포넌트 파일 생성 Home.vue
2.컴포넌트를 불러올 App.vue 파일에서 등록, 선언
import Home from "./Home"
export default {
  components: {
    Home
  }
}
3.<Home/>로 컴포넌트 사용

* 전역등록
1.main.js 파일에서 등록
import StatusComponents from './Status.vue';
Vue.component(tagName, options) 형식으로 선언한다.
ex) Vue.component('AppStatus', StatusComponents);

부모 컴포넌트에서 자식 컴포넌트로 데이터 전달
:nameOfChild="name"
부모 컴포넌트의 name의 값을 nameOfChild라는 변수에 담에 자식 컴포넌트로 전달함을 의미
자식 컴포넌트에서는 props라는 속성값에 배열로 받게 되며 data와 동일하게 this.nameOfChild로 사용할 수 있다.
export default {
	props:[nameOfChild]
	전달되는 값의 데이터 타입을 전달 받아 원하는 데이터 타입이 아닌 경우 에러 발생시킬수 있다. 이 때는 객체 형태로 작성
	nameOfChild: {
		type: String,
		required : true, // 부모 컴포넌트에서 값을 받지 못하면 에러 발생
		default : 'LEGO' // 부모 컴포넌트에서 값을 받지 못할 때 기본값
    }
}
데이터를 정상적으로 받았다면
{{ nameOfChild }}로 사용할 수 있게 된다.
부모 컴포넌트에서 name의 값이 변경 되었다면
자식 컴포넌트의 값도 동일하게 변경 된다

props의 값을 직접적으로 수정하면 해당 자식 컴포넌트에서만 유효하고
부모 컴포넌트의 값이 변경됨에 따라 자식 컴포넌트의 값이 다시 변경될 수 있어 독립성이 없게 되므로 직접 수정하지 않고 새로운 변수에 할당해서 사용한다.
data(){
	return {
	user: {},
	}
},
객체 user를 선언후 v-model로 연결하고 created에서
부모 컴포넌트에서 받은 값을 할당해서 전달 받은 값을 직접적으로 수정하지 않게 한다.
created(){
	this.user.name = this.name;
	this.user.address = this.address;
	this.user.phone = this.phone;
	this.user.hasDog = this.hasDog;
},
changeUser라는 함수를 만들어서 console.log(this.user)을 출력시키면
변경된 객체 user의 값을 확인 할 수 있다.
this.$emit을 사용하면 부모 컴포넌트로 신호를 보낼 수 있다.
this.$emit('신호의 이름 ', 전달 할 값) 
this.$emit('child', this.user) - child(this.user)와 같은 의미

부모 컴포넌트에서 @child="parents" 라고 선언을 하면
child라는 신호가 오면 부모 컴포넌트에 선언 되어 있는 함수 parents를 실행 하라는 의미
parents(user){
	console.log('받음');
	this.name = user.name;
	this.address = user.address;
	this.phone = user.phone;
	this.hasDog = user.hasDog;
},
emit으로 자식 컴포넌트에서 받은 값으로 할당하면서
자식 컴포넌트에서 부모 컴포넌트의 값을 바꾸게 된다.

eventBus (형제 컴포넌트에서 형제 컴포넌트로 통신)
- 형제 컴포넌트를 이어주는 가상의 부모 컴포넌트 역할

1.main.js에 선언(전역으로 사용하도록 선언)
export const eventBus = new Vue({
  methods:{
    userWasEdited(date){
      this.$emit('userWasEdited', date);
    }
	data를 인자로 갖는 메소드 userWasEdited를 선언해서
	userWasEdited와 data를 전달하는 $emit 선언
  }
});

2.컴포넌트에서 선언, 사용
선언
import { eventBus } from "../main"
사용
eventBus.userWasEdited(new Date());
main.js에 정의된 eventBus의 함수 userWasEdited에 new Date를 인자로 받아서 실행 시키면
형제 컴포넌트에서 이벤트 리스너인 eventBus.$on('userWasEdited', (date)가 실행되면서
형제 컨포넌트에서 받은 인자의 값 data를 받아서 
this.editedDate = date를 실행하게 되면서
값을 바꾸게 된다.

3.형제 컴포넌트와의 통신
data(){
	return {
		editedDate: null
	}
},
created(){
	eventBus.$on('userWasEdited', (date)=> {
		this.editedDate = date;
	});
	전역으로 선언된 이벤트버스 userWasEdited
},


Minxin : 공통적으로 사용되는 함수를 전역 선언
1.mixins 폴더 생성 dateFormat.js 파일 생성
// 믹스인에서 뷰 인스턴스의 속성값(computed, data) 사용 가능하기 때문에
별도의 선언 없이 getDateAneTime(createdAt) 함수를 실행 가능하고
data(){
    return {
      mixinDate: '나는 믹스인~'
    }
},
믹스인에 선언되어 있는 data는 다른 컴포넌트에서 불러 올 수 있다.
computed:{
	helloToMixin(){
		return this.mixinDate + "안녕하시오"
		실행 결과는 : 나는 믹스인~안녕하시오
	}
},




export const dateFormat = {
  // 믹스인을 사용하는 컴포넌트가 나중에 실행되므로 컴포넌트의 값이 최종값이 된다.
  created(){
    console.log('믹스인');
  },
  data(){
    return {
      mixinDate: '나는 믹스인~'
    }
  },
  methods:{
    getDateAneTime(date){
      if( date !== null ){
        let hour = date.getHours();
        let minutes = date.getMinutes();
        let fullDate = `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;
        return `${fullDate} ${hour}:${minutes}`
      } else {
        return null
      }
    }
  }
}

2.컴포넌트에서 import
import { dateFormat } from "../mixins/dateFormat"

export default {
  components: {
    UserDetail,
    UserEdit
  },
  data() {
    return {
      name: 'Hoza',
      address: 'Seoul',
      phone: '010-1234-5678',
      hasDog: true,
      createdAt : null,
    }
  },
  created(){
    console.log('유저 컴포넌트');
    this.createdAt = new Date();
  },
  computed:{
    helloToMixin(){
      return this.mixinDate + "안녕하시오"
    }
  },
  methods:{
    changeName(){
      this.name = 'hdk236p'
    },
    parents(user){
      console.log('받음');
      this.name = user.name;
      this.address = user.address;
      this.phone = user.phone;
      this.hasDog = user.hasDog;
    },
  },
  mixins:[dateFormat]
}























