vue/cli
  설치 : npm i -g @vue/cli
  버전 : vue --version
  생성 : vue create xxxxx
  npm run serve
  npm run build





컴포넌트
  * 지역 등록
    1.컴포넌트 파일(Home.vue) 생성 
    2.컴포넌트를 불러올 파일(App.vue)에서
      등록
      import Home from "./Home"

      선언
      export default {
        components: {
          Home
        }
      }

    3.컴포넌트 사용
    <template>
      <Home/>
    </template>

  * 전역등록
    1.main.js 파일에서 등록
      import StatusComponents from './Status.vue';

      Vue.component(tagName, options) 형식으로 선언한다.
      ex) Vue.component('AppStatus', StatusComponents);

  * 부모 컴포넌트에서 자식 컴포넌트로 데이터 전달
    1.변수 nameOfChild에 부모 컴포넌트의 data중 name을 담아 자식 컴포넌트로 전달
      <UserDetail :nameOfChild="name">
    2.자식 컴포넌트에서는 속성값 props에서 배열값으로 자신의 data와 동일하게 사용 가능
      객체 형태로 작성하면 전달 받는 값의 데이터 타입을 명시해 지정된 데이터 타입이 아닌 경우 검사 할 수 있고
      기본값을 정의해 줄 수 있다.
      export default {
        배열 props:[nameOfChild]
        객체 nameOfChild: {
          type: String,
          required : true, // 값을 받지 못하면 에러 발생
          default : 'LEGO' // 값을 받지 못할 때 기본값
          }
      }
      스크립트에서는 this.nameOfChild
      태그에서는 {{ nameOfChild }}로 사용할 수 있게 된다.
      부모 컴포넌트에서 name의 값이 변경 되면 자식 컴포넌트의 값도 동일하게 변경 된다
    3.전달 받은 props의 값을 직접적으로 수정하면 해당 자식 컴포넌트에서만 유효하고
      부모 컴포넌트의 값이 변경되면 자식 컴포넌트의 값이 다시 변경되어 독립성이 없어져 직접 수정하지 않는다.  
    4.자식 컴포넌트에서 별도의 data user를 생성 후
      v-model에서 user와 data를 연결 한 다음
      created에서 부모 컴포넌트에서 받은 값을 user에 할당한다.
      이러면 부모 컴포넌트의 값을 변경하지 않으면서 data를 사용할 수 있다.
      data(){
        return {
          user: {},
        }
      },
      created(){
        this.user.name = this.name;
        this.user.address = this.address;
        this.user.phone = this.phone;
        this.user.hasDog = this.hasDog;
      },
    5.this.$emit을 사용하면 부모 컴포넌트로 신호를 보낼 수 있다.
      $emit으로 부모 컴포넌트에게 값을 전달시켜서
      전달 받은 값을 직접적으로 수정하지 않고
      부모 컴포넌트의 data를 변경시켜서 자신의 값도 변경 하도록 한다.
      methods:{
        changeUser(){
          this.$emit('child', this.user);
        }
      }
      this.$emit('신호의 이름 ', 전달 할 값) 
      this.$emit('child', this.user) : child(this.user)와 같은 의미
    6.부모 컴포넌트에서 @child="parents" 라고 선언을 하면
      child라는 신호가 오면 부모 컴포넌트에 선언 되어 있는 함수 parents를 실행 하라는 의미
      parents(user){
        this.name = user.name;
        this.address = user.address;
        this.phone = user.phone;
        this.hasDog = user.hasDog;
      },
      emit의 전달 여부에 따라
      자식 컴포넌트에서 부모 컴포넌트의 값을 바꾸게 한다.





eventBus (형제 컴포넌트를 이어주는 가상의 부모 컴포넌트 역할)
  1.main.js에 선언(전역 사용)
    export const eventBus = new Vue({
      methods:{
        userWasEdited(date){
          this.$emit('userWasEdited', date);
        }
      data를 인자로 갖는 메소드 userWasEdited를 선언해서
      userWasEdited와 data를 전달하는 $emit 선언
      }
    });

  2.사용할 컴포넌트에서 선언
  import { eventBus } from "../main"

  3.형제 컴포넌트와의 통신
    a 컴포넌트에서 이벤트 버스를 실행하면
    methods:{
      changeUser(){
        eventBus.userWasEdited(new Date());
      }
    }
    
    이벤트 리스너 .$on을 사용해서
    b 컴포넌트에서 a 컴포넌트의 신호를 전달 받을 수 있다.
    data(){
      return {
        editedDate: null
      }
    },
    created(){
      eventBus.$on('userWasEdited', (date)=> {
        this.editedDate = date;
      });
    },






Minxin : 함수의 전역 선언
  1.mixins 폴더 생성 dateFormat.js 파일 생성
    뷰 인스턴스와 구조가 같아서 별도의 선언 없이 methods만으로 사용가능하며
    선언된 함수, data는 다른 컴포넌트에서 사용할 수 있다.
    믹스인, 컴포넌트 순으로 실행되므로 컴포넌트의 값이 최종값이 된다.

    export const dateFormat = {
      created(){
        console.log('믹스인');
      },
      data(){
        return {
          mixinDate: '나는 믹스인~'
        }
      },
      methods:{
        getDateAneTime(date){
          if( date !== null ){
            let hour = date.getHours();
            let minutes = date.getMinutes();
            let fullDate = `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;
            return `${fullDate} ${hour}:${minutes}`
          } else {
            return null
          }
        }
      }
    }
    
  2.컴포넌트에서 사용하기
    import { dateFormat } from "../mixins/dateFormat"

    export default {
      mixins:[dateFormat]
    }

    스트립트에서는 this.getDateAneTime(new Date())
    태그에서는 {{ getDateAneTime(new Date) }}




router  
  const routes = [
    * 모든 컴포넌트를 전부 로드
    {
      path: '/',
      name: 'Home',
      component: Home
    },
    * 해당하는 페이지를 보여줌(lazy-loaded)
    {
      path: '/about',
      name: 'About',
      // route level code-splitting
      // this generates a separate chunk (about.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () => import(/* webpackChunkName: "about" */ '../views/About.vue')
    },
    * 하위 경로가 있는 라우터
    {
      path: '/users'
      name: 'users',
      component: Users,
      children:[
        {
          path:":id",   
          name:'users-detail',
          component: UsersDetail,
        },
        {
          path:":id/edit",
          name:'users-edit',
          component: UsersEdit,
        },
      ]
    },
  ]

  컴포넌트를 받는 태그
    <router-view></router-view>

  컴포넌트 이동
    @click="$router.push({path: '/'})"
    @click="$router.push({name: 'home'})"
    
    값만 넣어도 되지만
    @click="$router.push('/')"

    다른 파라미터를 같이 넘겨야 하거나
    명확한 경로 선언을 위해 객체로 표현하는것이 더 좋다.
    @click="$router.push({name: 'home', query: {}, params: {}})"

    router-link 로 이동(a태그로 보여진다)
    <router-link :to="{name: 'home'}"></router-link>

    console.log('router', this.$router)
      router > index.js의 내용
    console.log('route', this.$route)
      현재 router의 내용 (name: "TestRouter", params: {userId: "test"}, path: "/TestRouter/test")
    
  router guard
    // router를 로드 하기 전 실행
    beforeEnter: (to, from, next) => {
      /*
        to : 으로
        from : 에서
        next : 라우터 이동을 결정
          next() : 이동
          next('/User') : 접근 거부하고 싶다면 다른 경로로 이동 시킴
          isUserLogin === true ? next() : next('/User') : 조건 분기로 처리 할 수도 있다.
      */

      next()
    },

    vue 파일 내에서 실행
    beforeRouteEnter(to, from, next){
      next()
    }
    beforeRouteLeave(to, from, next){
      next()
    }

    이벤트 훅 보다 우선 실행된다.
    beforeEnter -> created
    beforeLeave -> destroyed

  redirect
    {
      path: '/*', // 선언된 라우터 경로에 없는 모든 경우
      redirect: { name: 'User' }
    }





vuex : 컴포넌트의 중앙 집중식 저장소, 상태 관리 패턴 + 라이브러리
  1.state : data()의 역할
    * state 등록
      - 컴포넌트에서 사용 시 import를 하지 않고 main.js에 선언한다.
        main.js
          import store from './store'
          new Vue({
            router,
            store,
            vuetify,
            render: h => h(App)
          }).$mount('#app')
    * 컴포넌트에서 state 사용
      state: {
        allUsers:[
          {userId: 'hoza123', password: '123', name: 'Hoza', address: 'Seoul', src:'https://png.pngtree.com/svg/20170128/avatar_beard_shades_cool_959650.png'},
          {userId: 'max123', password: '456', name: 'Max', address: 'Berlin', src:'https://png.pngtree.com/svg/20170128/avatar_afro_black_man_beard_774214.png'},
          {userId: 'lego123', password: '789', name: 'Lego', address: 'Busan', src:'https://png.pngtree.com/svg/20170128/avatar_black_african_american_woman_780239.png'}
        ]
      },

      $store.state.allUsers
      this.$store.state.allUsers
      
    * 축약
      import { mapState, mapGetters } from 'vuex'
      computed: {
        ...mapState(['allUsers']) // $store.state.allUsers에서 allUsers로 축약
      },

  2.getters : 반복된 계산식 캐싱 computed 역할
    * 등록 : state 사용을 함수에 전달 해야한다.
      getters: {
        allUsersCount: state => {
          return state.allUsers.length
        },
      },

    * 사용
      state :   $store.state.allUsers.length
      getters : $store.getters.allUsersCount
    
    * mapping getters
      $store.getters가 반복되는 사용하는 불편함을 개선
        $store.getters.allUsersCount
        $store.getters.countOfSeoul
        $store.getters.persentOfSeoul
      
      * 선언
        불러올 컴포넌트에서 import { mapGetters } from 'vuex'
        computed: {
        // 축약1 : 배열로 선언(등록한 mapGetters만 컴포넌트에서 사용 가능)
        ...mapGetters(['allUsersCount', 'countOfSeoul', 'persentOfSeoul'])
          $store.getters.allUsersCount가 아닌 allUsersCount로 축약해서 사용

        // 축약2 : 객체로 선언
        ...mapGetters({
          count: 'allUsersCount',
          seouls: 'countOfSeoul',
          percent: 'persentOfSeoul'
        }),
          해당 컴포넌트에서는 count, seouls, percent로 사용 가능
      },
  
  3.mutations
      state를 변경 시키는 동일한 기능의 함수를 각각의 컴포넌트에 따로 사용하지 않고
      mutations 안에 만들어 각각의 컴포넌트에서 실행(commit)해서 코드는 간결하게 할 수 있다.
      state 값을 변경 시켜야 하기 때문에 인자값 state, 넘겨준 각각의 값을 받을수 있는 인자값 payload를 사용한다.
        mutations: {
          addUsers: (state, payload) => {
            state.allUsers.push(payload) // state의 allUsers에 받은 인자를 추가함
          }
        },

        컴포넌트에서 사용
        import { mapMutations } from 'vuex'
        methods: {
          ...mapActions(['addUsers']),
        }
        vue 인스턴스에 선언된 함수 처럼 사용 할 수 있게 된다.
        this.addUsers(userObj)

        mutations 실행 : commit(mutation이름, 인자(payload))
        this.$store.commit('addUsers', userObj)
  
  4.actions
    mutations에 비동기 로직이 포함되면 동일한 값을
    여러 컴포넌트에서 변경을 요청했을때
    그 순서를 알기 어렵기 때문에
    비동기 로직은 actions에서 실행시킨다.

    state 변경 => mutations
    mutations을 동작 시키는것 => actions
    
      mutations의 addUsers를 실행
        addUsers: context => {
          context.commit('addUsers')
        }
      
      context 축약 ({context})
        addUsers: ({commit}, payload) => { // function({commit})
          commit('addUsers', payload)
        }

      dispatch로 actions의 함수 실행
        this.$store.dispatch('addUsers', userObj)

      컴포넌트에 선언하고 사용할 때는 dispatch가 필요 없다.
      ...mapActions(['addUsers']),
      this.addUsers(userObj)


vue3 test